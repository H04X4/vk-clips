import html
import re
import importlib
from typing import Dict
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
import config
from vk_worker import VKWorker

from aiogram.client.default import DefaultBotProperties

bot = Bot(
    token=config.TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
worker = VKWorker()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: chat_id -> {"message_id": int, "last_text": str, "last_reply_markup": InlineKeyboardMarkup, "busy": bool, "last_state": dict, "use_auto_delay": bool}
log_status: Dict[int, Dict] = {}
current_top_count = config.TOP_COUNT
current_processing_delay = config.PROCESSING_DELAY
current_use_group = getattr(config, 'USE_GROUP', False)

def reload_config():
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥—É–ª—å config.py –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è."""
    global current_top_count, current_processing_delay, current_use_group
    importlib.reload(config)
    current_top_count = config.TOP_COUNT
    current_processing_delay = config.PROCESSING_DELAY
    current_use_group = getattr(config, 'USE_GROUP', False)
    return config

def render_progress_bar(current: int, total: int, length: int = 10) -> str:
    """–°–æ–∑–¥–∞—ë—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä."""
    if total == 0:
        return "‚ñ°" * length
    filled = int(current / total * length)
    return "‚ñ†" * filled + "‚ñ°" * (length - filled)

def render_log_text(state: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ª–æ–≥ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞–º–∏ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏."""
    lines = state.get("messages", [])[-config.MAX_LINES_IN_LOG:]
    total = state.get("total", 0)
    downloaded = state.get("downloaded", 0)
    published = state.get("published", 0)
    failed = state.get("failed", 0)

    stage_map = {
        "init": "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è",
        "fetch_top": "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–∞",
        "downloaded": "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ",
        "uploaded": "–ó–∞–≥—Ä—É–∑–∫–∞",
        "published": "–ü—É–±–ª–∏–∫–∞—Ü–∏—è",
        "done": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
    }

    header = (
        f"<b>üìä –°—Ç–∞—Ç—É—Å:</b> {stage_map.get(state.get('stage', 'init'), '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è')}\n"
        f"<b>–í—Å–µ–≥–æ –≤–∏–¥–µ–æ:</b> {total}\n"
        f"<b>–°–∫–∞—á–∞–Ω–æ:</b> {downloaded} {render_progress_bar(downloaded, total)}\n"
        f"<b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:</b> {published} {render_progress_bar(published, total)}\n"
        f"<b>–û—à–∏–±–æ–∫:</b> {failed}\n"
        f"{'‚îÄ'*17}\n"
    )

    body = "\n".join(f"{html.escape(line)}" for line in lines)
    result = f"{header}<pre>{body}</pre>"

    if len(result) > 3900:
        result = "‚Ä¶\n" + result[-3800:]
    return result

def update_config_file(top_count: int, processing_delay: int, use_group: bool = None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è TOP_COUNT, PROCESSING_DELAY –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ USE_GROUP –≤ config.py."""
    config_path = "config.py"
    try:
        with open(config_path, "r", encoding="utf-8") as f:
            content = f.read()
        
        content = re.sub(r"TOP_COUNT\s*=\s*\d+", f"TOP_COUNT = {top_count}", content)
        content = re.sub(r"PROCESSING_DELAY\s*=\s*\d+", f"PROCESSING_DELAY = {processing_delay}", content)
        if use_group is not None:
            content = re.sub(r"USE_GROUP\s*=\s*(True|False)", f"USE_GROUP = {use_group}", content)
        
        with open(config_path, "w", encoding="utf-8") as f:
            f.write(content)
        reload_config()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ config.py: {e}")
        bot.send_message(config.ADMIN_CHAT_ID, f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ config.py: {str(e)}")

def get_settings_menu() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è TOP_COUNT, PROCESSING_DELAY –∏ —Ä–µ–∂–∏–º–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."""
    global current_top_count, current_processing_delay, current_use_group
    mode_text = "–°–æ–æ–±—â–µ—Å—Ç–≤–æ" if current_use_group else "–ü—Ä–æ—Ñ–∏–ª—å"
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏: TOP_COUNT={current_top_count}, PROCESSING_DELAY={current_processing_delay}—Å", callback_data="noop")],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è -1", callback_data="decrease_top_count"),
                InlineKeyboardButton(text=f"–í–∏–¥–µ–æ: {current_top_count}", callback_data="noop"),
                InlineKeyboardButton(text="+1 ‚û°Ô∏è", callback_data="increase_top_count")
            ],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è -20—Å", callback_data="decrease_delay"),
                InlineKeyboardButton(text=f"–ó–∞–¥–µ—Ä–∂–∫–∞: {current_processing_delay}—Å", callback_data="noop"),
                InlineKeyboardButton(text="+20—Å ‚û°Ô∏è", callback_data="increase_delay")
            ],
            [InlineKeyboardButton(text="‚è± –ê–≤—Ç–æ (—á–∞—Å –Ω–∞ TOP_COUNT)", callback_data="auto_delay")],
            [InlineKeyboardButton(text=f"–†–µ–∂–∏–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {mode_text}", callback_data="toggle_publish_mode")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
    )

def get_main_menu() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–ó–∞–ø–æ—Å—Ç–∏—Ç—å –µ—â—ë' –∏ '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÅ –ó–∞–ø–æ—Å—Ç–∏—Ç—å –µ—â—ë", callback_data="restart"),
                InlineKeyboardButton(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="change_settings")
            ]
        ]
    )

async def update_log_message(chat_id: int, text: str, menu: InlineKeyboardMarkup = None):
    """–°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–æ–º, –∏–∑–±–µ–≥–∞—è –æ—à–∏–±–∫–∏ 'message is not modified'."""
    kb = menu or get_main_menu()
    entry = log_status.get(chat_id)

    if not entry or "message_id" not in entry:
        msg = await bot.send_message(chat_id, text, reply_markup=kb)
        log_status[chat_id] = {
            "message_id": msg.message_id,
            "last_text": text,
            "last_reply_markup": kb,
            "busy": False,
            "last_state": {},
            "use_auto_delay": False
        }
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        if text != entry.get("last_text") or str(kb.inline_keyboard) != str(entry.get("last_reply_markup", {}).inline_keyboard):
            try:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=entry["message_id"],
                    text=text,
                    reply_markup=kb
                )
                entry["last_text"] = text
                entry["last_reply_markup"] = kb
            except TelegramBadRequest as e:
                if "message is not modified" in str(e):
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                else:
                    raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            except Exception as e:
                logger.error(f"Error updating message: {e}")

def progress_callback_factory(chat_id: int):
    """–°–æ–∑–¥–∞—ë—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞."""
    async def _cb(state: Dict):
        text = render_log_text(state)
        log_status[chat_id]["last_state"] = state
        await update_log_message(chat_id, text)
    return _cb

async def run_cycle_for_chat(chat_id: int):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å —Ç–µ–∫—É—â–∏–º TOP_COUNT –∏ PROCESSING_DELAY."""
    global current_top_count, current_processing_delay, current_use_group
    entry = log_status.setdefault(chat_id, {})
    if entry.get("busy"):
        await bot.send_message(chat_id, "‚è≥ –£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–¥–∞—á–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return

    entry["busy"] = True
    try:
        reload_config()
        worker.TOP_COUNT = current_top_count
        worker.group_id = config.GROUP_ID if current_use_group else None
        if entry.get("use_auto_delay", False) and current_top_count > 0:
            worker.PROCESSING_DELAY = 3600 // current_top_count
            await bot.send_message(chat_id, f"‚è± –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ-–∑–∞–¥–µ—Ä–∂–∫–∞: {worker.PROCESSING_DELAY}—Å –Ω–∞ –≤–∏–¥–µ–æ")
        else:
            worker.PROCESSING_DELAY = current_processing_delay
        cb = progress_callback_factory(chat_id)
        await worker.run_cycle(cb)
    except Exception as e:
        await bot.send_message(chat_id, f"üí• –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        entry["busy"] = False
        entry["use_auto_delay"] = False

@dp.message(Command("start"))
async def start_cmd(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –ø–æ–∫–∞–∑—ã–≤–∞—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    if config.ADMIN_CHAT_ID and message.chat.id != config.ADMIN_CHAT_ID:
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
        return
    reload_config()
    text = "ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /run –∏–ª–∏ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–ø–æ—Å—Ç–∏—Ç—å –µ—â—ë¬ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ü–∏–∫–ª–∞.\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:"
    await update_log_message(message.chat.id, text, get_settings_menu())

@dp.message(Command("run"))
async def run_cmd(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /run, –∑–∞–ø—É—Å–∫–∞—è —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
    if config.ADMIN_CHAT_ID and message.chat.id != config.ADMIN_CHAT_ID:
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
        return
    await run_cycle_for_chat(message.chat.id)

@dp.callback_query(F.data == "restart")
async def restart_btn(query: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ó–∞–ø–æ—Å—Ç–∏—Ç—å –µ—â—ë'."""
    if config.ADMIN_CHAT_ID and query.message.chat.id != config.ADMIN_CHAT_ID:
        return
    await query.answer("üîÅ –ó–∞–ø—É—Å–∫–∞—é –Ω–æ–≤—ã–π —Ü–∏–∫–ª...")
    await run_cycle_for_chat(query.message.chat.id)

@dp.callback_query(F.data == "change_settings")
async def change_settings_btn(query: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'."""
    if config.ADMIN_CHAT_ID and query.message.chat.id != config.ADMIN_CHAT_ID:
        return
    reload_config()
    await query.answer("‚öôÔ∏è –û—Ç–∫—Ä—ã–≤–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    text = render_log_text(log_status.get(query.message.chat.id, {}).get("last_state", {}))
    await bot.edit_message_text(
        chat_id=query.message.chat.id,
        message_id=query.message.message_id,
        text=text or "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        reply_markup=get_settings_menu()
    )

@dp.callback_query(F.data == "decrease_top_count")
async def decrease_top_count_btn(query: CallbackQuery):
    """–£–º–µ–Ω—å—à–∞–µ—Ç TOP_COUNT –Ω–∞ 1 –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç config.py."""
    global current_top_count
    if config.ADMIN_CHAT_ID and query.message.chat.id != config.ADMIN_CHAT_ID:
        return
    if current_top_count > 1:
        current_top_count -= 1
        update_config_file(current_top_count, current_processing_delay)
        await query.answer(f"TOP_COUNT —É–º–µ–Ω—å—à–µ–Ω –¥–æ {current_top_count}")
    else:
        await query.answer("TOP_COUNT –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1")
    text = render_log_text(log_status.get(query.message.chat.id, {}).get("last_state", {}))
    await bot.edit_message_text(
        chat_id=query.message.chat.id,
        message_id=query.message.message_id,
        text=text or "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        reply_markup=get_settings_menu()
    )

@dp.callback_query(F.data == "increase_top_count")
async def increase_top_count_btn(query: CallbackQuery):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç TOP_COUNT –Ω–∞ 1 –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç config.py."""
    global current_top_count
    if config.ADMIN_CHAT_ID and query.message.chat.id != config.ADMIN_CHAT_ID:
        return
    current_top_count += 1
    update_config_file(current_top_count, current_processing_delay)
    await query.answer(f"TOP_COUNT —É–≤–µ–ª–∏—á–µ–Ω –¥–æ {current_top_count}")
    text = render_log_text(log_status.get(query.message.chat.id, {}).get("last_state", {}))
    await bot.edit_message_text(
        chat_id=query.message.chat.id,
        message_id=query.message.message_id,
        text=text or "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        reply_markup=get_settings_menu()
    )

@dp.callback_query(F.data == "decrease_delay")
async def decrease_delay_btn(query: CallbackQuery):
    """–£–º–µ–Ω—å—à–∞–µ—Ç PROCESSING_DELAY –Ω–∞ 20 —Å–µ–∫—É–Ω–¥ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç config.py."""
    global current_processing_delay
    if config.ADMIN_CHAT_ID and query.message.chat.id != config.ADMIN_CHAT_ID:
        return
    if current_processing_delay >= 20:
        current_processing_delay -= 20
        update_config_file(current_top_count, current_processing_delay)
        await query.answer(f"PROCESSING_DELAY —É–º–µ–Ω—å—à–µ–Ω –¥–æ {current_processing_delay}—Å")
    else:
        await query.answer("PROCESSING_DELAY –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0")
    text = render_log_text(log_status.get(query.message.chat.id, {}).get("last_state", {}))
    await bot.edit_message_text(
        chat_id=query.message.chat.id,
        message_id=query.message.message_id,
        text=text or "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        reply_markup=get_settings_menu()
    )

@dp.callback_query(F.data == "increase_delay")
async def increase_delay_btn(query: CallbackQuery):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç PROCESSING_DELAY –Ω–∞ 20 —Å–µ–∫—É–Ω–¥ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç config.py."""
    global current_processing_delay
    if config.ADMIN_CHAT_ID and query.message.chat.id != config.ADMIN_CHAT_ID:
        return
    current_processing_delay += 20
    update_config_file(current_top_count, current_processing_delay)
    await query.answer(f"PROCESSING_DELAY —É–≤–µ–ª–∏—á–µ–Ω –¥–æ {current_processing_delay}—Å")
    text = render_log_text(log_status.get(query.message.chat.id, {}).get("last_state", {}))
    await bot.edit_message_text(
        chat_id=query.message.chat.id,
        message_id=query.message.message_id,
        text=text or "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        reply_markup=get_settings_menu()
    )

@dp.callback_query(F.data == "auto_delay")
async def auto_delay_btn(query: CallbackQuery):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ (1 —á–∞—Å / TOP_COUNT)."""
    if config.ADMIN_CHAT_ID and query.message.chat.id != config.ADMIN_CHAT_ID:
        return
    if current_top_count == 0:
        await query.answer("TOP_COUNT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –¥–ª—è –∞–≤—Ç–æ-–∑–∞–¥–µ—Ä–∂–∫–∏")
        return
    log_status[query.message.chat.id]["use_auto_delay"] = True
    auto_delay = 3600 // current_top_count
    await query.answer(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ-–∑–∞–¥–µ—Ä–∂–∫–∞: {auto_delay}—Å –Ω–∞ –≤–∏–¥–µ–æ")
    text = render_log_text(log_status.get(query.message.chat.id, {}).get("last_state", {}))
    await bot.edit_message_text(
        chat_id=query.message.chat.id,
        message_id=query.message.message_id,
        text=text or "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        reply_markup=get_settings_menu()
    )

@dp.callback_query(F.data == "toggle_publish_mode")
async def toggle_publish_mode_btn(query: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É '–ü—Ä–æ—Ñ–∏–ª—å' –∏ '–°–æ–æ–±—â–µ—Å—Ç–≤–æ'."""
    global current_use_group
    if config.ADMIN_CHAT_ID and query.message.chat.id != config.ADMIN_CHAT_ID:
        return
    current_use_group = not current_use_group
    update_config_file(current_top_count, current_processing_delay, current_use_group)
    mode_text = "–°–æ–æ–±—â–µ—Å—Ç–≤–æ" if current_use_group else "–ü—Ä–æ—Ñ–∏–ª—å"
    await query.answer(f"–†–µ–∂–∏–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mode_text}")
    text = render_log_text(log_status.get(query.message.chat.id, {}).get("last_state", {}))
    await bot.edit_message_text(
        chat_id=query.message.chat.id,
        message_id=query.message.message_id,
        text=text or "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        reply_markup=get_settings_menu()
    )

@dp.callback_query(F.data == "back_to_main")
async def back_to_main_btn(query: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é."""
    if config.ADMIN_CHAT_ID and query.message.chat.id != config.ADMIN_CHAT_ID:
        return
    await query.answer("üîô –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é")
    text = render_log_text(log_status.get(query.message.chat.id, {}).get("last_state", {}))
    await bot.edit_message_text(
        chat_id=query.message.chat.id,
        message_id=query.message.message_id,
        text=text or "üìä –°—Ç–∞—Ç—É—Å –Ω–µ –æ–±–Ω–æ–≤–ª—ë–Ω",
        reply_markup=get_main_menu()
    )

@dp.callback_query(F.data == "noop")
async def noop_btn(query: CallbackQuery):
    """–ü—É—Å—Ç–æ–π callback –¥–ª—è –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫."""
    await query.answer()

async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    try:
        await dp.start_polling(bot, allowed_updates=["message", "callback_query"])
    except Exception as e:
        logger.error(f"Error in main loop: {e}")

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
